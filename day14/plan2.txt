Algorithm
---------
Read input and store as list of strings
Call cycle function 1000000000 times
    North tilt
    West tilt
    South tilt
    East tilt

Notes
-----
STOP USING ARRAYS AND STAY WITH STRINGS
CHANGE tilt_array TO RETURN tilted_strings instead of doing strings to array

string_cache - keys are strings, values are strings
grid_cache - keys are strings, values are tuples

North tilt
----------
Receive list of strings named rock_map
Tilt the list for the North direction
    north = ["".join(reversed(x)) for x in list(zip(*arr))]
Flatten north into a single string named rock_string
If rock_string in map_cache
    north = list(map_cache[rock_string])
Else manually tilt list
    north =  tilt_array(north)
    map_cache[rock_string] = tuple(north)
return ["".join(x) for x in reversed(list(zip(*north)))]

West tilt
---------
Receive list of strings named rock_map
Tilt the list for the West direction
    west = ["".join(reversed(x)) for x in arr]
Flatten west into a single string named rock_string
If rock_string in map_cache
    west = list(map_cache[rock_string])
Else manually tilt list
    west = tilt_array(west)
    map_cache[rock_string] = tuple(west)
return ["".join(reversed(x)) for x in west]

South tilt
----------
Receive list of strings named rock_map
Tilt the list for the South direction
    south = ["".join(x) for x in list(zip(*arr))]
Flatten south into a single string named rock_string
If rock_string in map_cache
    south = list(map_cache[rock_string])
Else manually tilt list
    south = tilt_array(south)
    map_cache[rock_string] = tuple(south)
return ["".join(x) for x in list(zip(*south))]

East tilt
---------
Receive list of strings named rock_map
Flatten east into a single string name rock_string
If rock_string in map_cache
    east = list(map_cache[rock_string])
Else manually tilt list
    east = tilt_array(east)
    map_cache[rock_string] = tuple(east)
return east

Modify transpose_and_tilt to add perform run 4 times representing each direction and call tilt function on each
Before each direction
    First direction North
    Next direction West
    Next direction South
    Next direction East

Modify get_total_load to iterate over rows in array
	Convert each row to a string using	string = ''.join(row)
	Continue as written except add i+1 instead of i to compensate for the 0 index

# Problem states that this need to be run 4000000000 times
Change main function to run transport_and_tilt 1000 times
Save array after 1000 runs
Change main function to run continously
	After each 1000 runs
		Compare to saved array
			If different then overwrite saved array
			else terminate loop and get total load
