Main function
-------------
Read input from filename
Process input into list of lists
Separate into springs and nums lists
Create function to compute count of arrangements for springs and nums pair
Iterate over that function to get the sum of counts

Compute count function
----------------------
Pop first element of nums list into num
Set start and end to 0 and length of springs-1
Set current string to ''
Scan from start until you reach a '.' and have at least one '?' or '#' or reach the end or number of '#' = num


fields == groups
fields < groups
fields > groups

Create list of groups
Create fields dictionary that contains the starting point in the string as the key and the field characters for the value
Field is a string of characters that does not include '.'
Search field for all strings of #s


1. len(fields) == len(groups)
	while fields
		pop fields[0] into current field
		pop groups[0] into current group
		call function to get number of combinations
2. fields < groups
	must have multiple groups in field

		else if it can fit into the field then find all combinations of string for that group in that field, go to next field
		if number of remaining groups == number of remaining fields then go to the next group
		else if it cannot fit into field then go to the next group
			else find all combinations of string for that group in that field
3. fields > groups
	### one or more fields must be all .'s
	pop fields[0] into current field
	pop groups[0] into current group
	while fields > groups
		if len(current group) > len(current field)
			pop fields[0] into current field
			continue
		if the field contains an '#' then the group must go into this field only
			find all combinations of the group that fit this field
			pop fields[0] into current field
			pop groups[0] into current group
		else
			### field fits into group and does not contain a '#'
			find all combinations of the group that fit this field
			pop groups[0] into current group
