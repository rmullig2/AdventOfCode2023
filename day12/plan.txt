Main function
-------------
Read input from filename
Process input into list of lists
Separate into springs and nums lists
Create function to compute count of arrangements for springs and nums pair
Iterate over that function to get the sum of counts

Algorithm to find all possible combinations
-------------------------------------------
Compute found_damaged as len(re.findall('#', string))
Compute total_unknown as sum(nums)
Compute find_unknown as total_unknown - found_damaged
Initialize unknown_locations as empty list
Create list of unknown locations
	for location in re.finditer('\?', string):
		unknown_locations.append(location.start())
Compute all possible combinations of damaged locations
	possible_locations = list(combinations(unknown_locations, find_unknown))
Initialize possible_strings as empty set
Iterate over possible_locations
	Convert string into list
	For each index in possible_locations
		Change ? to #
	Convert list to string using ''.join(list)
	Append string to possible_strings
Return possible strings

Algorithm to find all valid combinations
----------------------------------------
Receive possible strings and broken
Initialize valid strings to empty set
for string in possible strings
	split_string = string.split('.')
        remove_empty = [string for string in split_string if string]
        new_broken = [len(string) for string in remove_empty]
        if new_broken == broken
		append string to valid strings
Return valid strings

Get total valid arrangements
----------------------------
Initialize total to zero
For each spring row, broken pair
	Get possible combinations and save to possible
	Get valid combinations and save to valid
Return valid combinations
