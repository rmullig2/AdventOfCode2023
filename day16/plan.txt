Gameplan
-------
Read in input file into list of strings  DONE
Insert border of *'s around contraption  DONE
Create function to determine if tile is in bounds (not part of border)  DONE
Create function to determine direction  DONE
Create function to follow beam
Realize that the beam will bounce around endlessly, need to terminate loop

Is tile in bounds  DONE
-----------------
Receive tuple representing (row, col) and contraption
If row == 0 or row == len(contraption) - 1 return False
If col == 0 or col == len(contraption[0]) - 1 return False
Return True

Get next tile coordinates  DONE
-------------------------
Receive tuple representing (row, col), direction
If direction == up
    next node = (row-1, col)
elif direction == down
    next node = (row+1, col)
elif direction == right
    next node = (row, col+1)
elif direction == left
    next node = (row, col-1)

Get next direction  DONE
------------------
if tile = /
    if direction == right
        new direction = up
    elif direction == left
        new direction = down
    elif direction == up
        new direction = right
    elif direction == down
        new direction == left
elif tile = \
    if direction == right
        new direction = down
    elif direction == left
        new direction = up
    elif direction == up
        new direction = left
    elif direction == down
        new direction == right
elif tile = |
    if direction in up, down
        new direction = direction
    if direction in left, right
        new direction = up, down
elif tile = -
    if direction in up, down
        new direction = left, right
    if direction in left, right
        new direction = direction
else
    new direction = direction


return_tiles = []
for direction in new direction
    return_tiles.append(new node, direction)
return return_tiles

Stringify
---------
Return string containing row-col-direction

Follow beam
-----------
Initialize energized to empty set
Initialize tiles to visit with tuple of [1,1], right
While tiles to visit
    Pop left most tuple from tiles to visit into current tile
    Add stringified row-col-direction to energized
    call get_next_direction to get direction of next tile(s)
    for each direction
        next tile = get next tiles(current tile[0], current_tile[1], contraption)
        append next tile to visit append tile if in bounds
Return energized

Count energized tiles
---------------------
Return length of energized
